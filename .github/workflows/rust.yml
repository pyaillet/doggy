name: Rust

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Install dependencies
      run: sudo apt-get update && sudo apt-get install -y protobuf-compiler
    - name: Build
      run: cargo build --verbose
    - name: Format
      run : cargo fmt --verbose
    - name: Clippy
      run: cargo clippy
    - name: Run tests
      run: cargo test --verbose
  cross-build:
    needs: build
    strategy:
      matrix:
        include:
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            arch: aarch_64
            target_os: linux
          - target: aarch64-apple-darwin
            os: macos-latest
            arch: aarcah_64
            target_os: osx
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            arch: x86_64
            target_os: linux
          - target: x86_64-apple-darwin
            os: macos-latest
            arch: x86_64
            target_os: osx
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          declare VERSION=25.2 && \
          echo "üì¶ Installing version: ${VERSION}" && \
          echo "üì¶ Installing for os/arch: ${{ matrix.target_os }}/${{ matrix.arch }}" && \
          PROTOC_ZIP=protoc-${VERSION}-${{ matrix.target_os¬†}}-${{ matrix.arch }}.zip && \
          echo "üè∑Ô∏è Will get the archive file: ${PROTOC_ZIP}" && \
          curl -OL https://github.com/protocolbuffers/protobuf/releases/download/v${VERSION}/${PROTOC_ZIP} && \
          echo "üèóÔ∏è Installing in path" && \
          sudo unzip -o ${PROTOC_ZIP} -d /usr/local bin/protoc && \
          sudo chmod +x /usr/local/bin/protoc && \
          sudo unzip -o ${PROTOC_ZIP} -d /usr/local 'include/*' && \
          echo "üßπ Cleaning up" && \
          rm -f ${PROTOClippy _ZIP}
      - name: Install Rust
        run: rustup update stable
      - name: Install cross-compilation tools
        uses: taiki-e/setup-cross-toolchain-action@v1
        with:
          target: ${{ matrix.target }}
      - name: cross build
        run: cargo build --target ${{ matrix.target }}
        env:
          PROTOC: /usr/local/bin/protoc
